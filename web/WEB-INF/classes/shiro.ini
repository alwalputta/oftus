[main]
# Ehcache
builtInCacheManager = org.apache.shiro.cache.MemoryConstrainedCacheManager
securityManager.cacheManager = $builtInCacheManager

# Create JDBC realm.
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm

# Configure JDBC realm datasource.
dataSource = com.mysql.jdbc.jdbc2.optional.MysqlDataSource
dataSource.URL = jdbc:mysql://localhost:3306/app
dataSource.user = root
dataSource.password = ""
jdbcRealm.dataSource = $dataSource

#sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
#jdbcRealm.credentialsMatcher = $sha256Matcher

# Configure JDBC realm SQL queries.
jdbcRealm.authenticationQuery = SELECT password FROM Credential WHERE status = 'A' and username = ?
jdbcRealm.userRolesQuery = SELECT c.role FROM role c, UserRole d WHERE c.role_id and d.role_id and user_Id = (select b.user_id from credential a, usercredential b where a.credential_id = b.credential_id and a.username = ?)
#jdbcRealm.permissionsQuery = SELECT role_permission FROM roles WHERE role_name = ?

authc = org.apache.shiro.web.filter.authc.FormAuthenticationFilter
authc.loginUrl = index
authc.successUrl = /WEB-INF/results/secure/mainpage.jsp

[filters] 
roles.unauthorizedUrl = html/welcome.html

# name of request parameter with username; if not present filter assumes 'username'
authc.usernameParam = username
# name of request parameter with password; if not present filter assumes 'password'
authc.passwordParam = password
authc.rememberMeParam = rememberMe
#authc.failureKeyAttribute = LoginFailure
 
[urls]
#** = authc, roles[admin]
html/** = noSessionCreation, anon
css/** = noSessionCreation, anon
images/** = noSessionCreation, anon
js/** = noSessionCreation, anon
template/** = noSessionCreation, anon
** = noSessionCreation, anon
/WEB-INF/results/open/** = anon
/WEB-INF/results/secure/** = authc, roles[user]
/WEB-INF/results/admin/** = authc, roles[admin]
